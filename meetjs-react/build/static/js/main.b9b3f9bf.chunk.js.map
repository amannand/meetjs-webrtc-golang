{"version":3,"sources":["assets/images/logo.svg","assets/images/mic-on.svg","assets/images/mic-off.svg","assets/images/cam-on.svg","assets/images/cam-off.svg","assets/images/view.svg","services/api.services.tsx","components/home/home.tsx","components/state-machine/state-machine.tsx","components/session-modal/modal.tsx","services/web-socket.services.tsx","utils/identifier.utils.ts","constants/stun-servers.ts","utils/easy-rtc.ts","components/meeting/meeting.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","verifySocket","url","Axios","get","process","params","State","Home","useState","host","setHost","title","setTitle","password","setPassword","history","useHistory","className","src","logo","alt","onSubmit","event","preventDefault","post","JSON","stringify","createSession","then","response","push","data","socket","catch","error","console","message","placeholder","type","value","onChange","target","required","autoComplete","SessionCredentials","props","submitted","setSubmitted","connect","action","ConnectionSocket","connection","this","WebSocket","close","callback","onopen","userID","send","description","to","candidate","onmessage","readyState","OPEN","byteToHex","byte","toString","slice","STUN_SERVERS","iceServers","urls","EasyRTC","servers","stream","peerConnection","RTCPeerConnection","getTracks","forEach","track","addTrack","createOffer","sessionDescription","setLocalDescription","createAnswer","setRemoteDescription","RTCSessionDescription","addIceCandidate","ontrack","onicecandidate","Meeting","location","useLocation","INVALID","state","setState","audio","setAudio","video","setVideo","viewMode","setViewMode","setConnection","users","setUsers","setSocket","pathname","split","localStream","setLocalStream","localVideo","useRef","userId","len","arr","Uint8Array","window","crypto","getRandomValues","Array","from","join","generateId","useBeforeunload","current","useEffect","unmounted","a","VALID_URL","log","href","getValidity","srcObject","navigator","mediaDevices","getUserMedia","kind","enabled","socketConnection","remoteStreams","rtcPeerConnection","onOpen","onMessage","parse","MediaStream","onIceCandidate","onTrack","mediaStream","document","getElementById","prevState","indexOf","concat","sendDescription","answer","receiveAnswer","prevItems","splice","undefined","connectSession","LOGGED","JOINED","map","user","index","key","id","autoPlay","hidden","ref","muted","onClick","length","view","micOn","micOff","camOn","camOff","App","createBrowserHistory","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9b3f9bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.acb38cf1.svg\";","module.exports = __webpack_public_path__ + \"static/media/mic-on.5ce2865f.svg\";","module.exports = __webpack_public_path__ + \"static/media/mic-off.99246803.svg\";","module.exports = __webpack_public_path__ + \"static/media/cam-on.a9c7e91b.svg\";","module.exports = __webpack_public_path__ + \"static/media/cam-off.60765bda.svg\";","module.exports = __webpack_public_path__ + \"static/media/view.d319b0ef.svg\";","import Axios from \"axios\";\nimport { ResponseData } from \"../interfaces/response-data\";\n\nexport function createSession(host: string, title: string, password: string): Promise<Response & ResponseData> {\n  return Axios.post(`${process.env.REACT_APP_SERVER}/session`, JSON.stringify({\n    title,\n    host,\n    password\n  })\n  );\n}\n\nexport function connectSession(host: string, password: string, socket: string): Promise<Response & ResponseData> {\n  return Axios.post(`${process.env.REACT_APP_SERVER}/connect/${socket}`, JSON.stringify({\n    host,\n    password\n  })\n  );\n}\n\nexport function verifySocket(url: string): Promise<Response> {\n  return Axios.get(`${process.env.REACT_APP_SERVER}/connect`, {\n    params: {\n      url\n    }\n  });\n}","import React, { useState } from 'react';\nimport { useHistory } from \"react-router\";\nimport './home.scss';\nimport logo from '../../assets/images/logo.svg';\nimport { createSession } from '../../services/api.services';\nimport { ResponseData } from '../../interfaces/response-data';\n\nexport const Home = () => {\n  const [host, setHost] = useState<string>('');\n  const [title, setTitle] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const history = useHistory();\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    createSession(host, title, password).then((response: Response & ResponseData) => {\n      history.push(`/meeting/${response.data.socket}`);\n    }).catch((error: Error) => {\n      console.error(error.message)\n    });\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <div className=\"header__left\">\n          <img src={logo} alt=\"Logo\" className=\"header__left__logo\" />\n          <span className=\"header__left__text\">MeetJS</span>\n        </div>\n        <div className=\"header__right\">\n          <span className=\"header__right__margin\">Github</span>\n          <span>About</span>\n        </div>\n      </div>\n      <div className=\"body\">\n        <span className=\"body__title\">Do you want a free video chat platform?</span>\n        <span className=\"body__sub-title\">Get you own URL and share it with others to join you.</span>\n        <form onSubmit={onSubmit} className=\"body__form\">\n          <div className=\"body__form__inputs\">\n            <input placeholder=\"Host\" className=\"body__form__inputs__input\" type=\"text\" value={host} onChange={(event) => setHost(event.target.value)} required autoComplete={\"on\"}/>\n            <input placeholder=\"Title\" className=\"body__form__inputs__input\" type=\"text\" value={title} onChange={(event)=> setTitle(event.target.value)} required autoComplete={\"on\"}/>\n            <input placeholder=\"Password\" className=\"body__form__inputs__input\" type=\"password\" value={password} onChange={(event)=> setPassword(event.target.value)} required autoComplete={\"on\"}/>\n          </div>\n          <div className=\"body__form__create\">\n            <button className=\"body__form__create__btn\" type=\"submit\">Create</button>\n            <span className=\"body__form__create__small-text\">Secure and simple</span>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}\n","export enum State {\n  VALID_URL = 1,\n  INVALID,\n  LOGGED,\n  JOINED\n}","import React, { useState } from 'react'\nimport './modal.scss';\n\ninterface Props {\n  connect: (host: string, password: string) => void;\n  error: boolean;\n}\n\nexport const SessionCredentials = (props: Props) => {\n  const [host, setHost] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const [submitted, setSubmitted] = useState<boolean>(false);\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    props.connect(host, password);\n    setSubmitted(true);\n  }\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modal__wrapper\">\n        <div className=\"modal__wrapper__body\">\n          <form onSubmit={onSubmit} className=\"modal__wrapper__body__form\" action=\"submit\">\n            <span className=\"modal__wrapper__body__form__small-text\">Connect with your friends</span>\n            <span className=\"modal__wrapper__body__form__big-text\">Enter your session credentials</span>\n            <input placeholder=\"Host\" className=\"modal__wrapper__body__form__input\" type=\"text\" value={host} onChange={(event) => setHost(event.target.value)} required autoComplete={\"on\"} />\n            <input placeholder=\"Password\" className=\"modal__wrapper__body__form__input\" value={password} onChange={(event) => setPassword(event.target.value)} type=\"password\" required autoComplete={\"on\"} />\n            <button className=\"modal__wrapper__body__form__connect\" type=\"submit\">Connect</button>\n            {props.error && submitted && <span className=\"modal__wrapper__body__form-error\">Invalid credentials</span>}\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { SocketEvent } from \"../interfaces/socket-data\";\n\nexport class ConnectionSocket {\n  private connection: WebSocket;\n\n  constructor(url: string) {\n    this.connection = new WebSocket(url);\n  }\n\n  /**\n   * Disconnect\n   */\n  disconnect() {\n    this.connection.close();\n  }\n  \n  /**\n   * On open connection event.\n   * @param callback handles on connection ready.\n   */\n  onOpen(callback: () => void) {\n    this.connection.onopen = callback;\n  }\n\n  /**\n   * Sends message through web sockets.\n   * @param data data to send\n   * @param type event type\n   * @param userID user id\n   * @param offer RTC offer\n   */\n  send(type: string, userID: string) {\n    this.connection.send(JSON.stringify({\n      type,\n      userID\n    }));\n  }\n\n  sendDescription(type: string, description: RTCSessionDescriptionInit, userID: string, to: string) {\n    this.connection.send(JSON.stringify({\n      type,\n      userID,\n      description: JSON.stringify(description),\n      to\n    }));\n  }\n\n  candidate(candidate: RTCIceCandidate, userID: string) {\n    this.connection.send(JSON.stringify({\n      candidate: JSON.stringify(candidate),\n      userID,\n      type: 'ice'\n    }));\n  }\n\n  /**\n   * On message received.\n   * @param callback method to handle on message function.\n   */\n  onMessage(callback: (event: Event & SocketEvent) => void) {\n    this.connection.onmessage = callback;\n  }\n\n  /**\n   * Checks if connection is ready.\n   */\n  isReady(): boolean {\n    return this.connection.readyState === this.connection.OPEN;\n  }\n}","export function byteToHex(byte) {\n  return ('0' + byte.toString(16)).slice(-2);\n}\n\nexport function generateId(len = 40) {\n  var arr = new Uint8Array(len / 2);\n  window.crypto.getRandomValues(arr);\n  return Array.from(arr, byteToHex).join(\"\");\n}","export const STUN_SERVERS = {\n  iceServers: [\n    { urls: 'stun:stun3.l.google.com:19302' },\n    { urls: 'stun:stun4.l.google.com:19302' },\n  ],\n}","import { StunServers } from \"../interfaces/stun-servers\";\n\nexport class EasyRTC {\n  servers: StunServers;\n  stream: MediaStream;\n  peerConnection: RTCPeerConnection;\n\n  constructor(servers: StunServers, stream: MediaStream) {\n    this.servers = servers;\n    this.stream = stream;\n\n    this.peerConnection = new RTCPeerConnection(servers);\n\n    this.stream.getTracks().forEach((track: MediaStreamTrack) => {\n      this.peerConnection.addTrack(track);\n    });\n  }\n\n  /**\n   * Creates offer to send to remote peers.\n   */\n  async createOffer() {\n    let sessionDescription: RTCSessionDescriptionInit;\n    sessionDescription = await this.peerConnection.createOffer();\n    this.peerConnection.setLocalDescription(sessionDescription);\n    \n    return sessionDescription;\n  }\n\n  /**\n   * Creates answer when offer is received.\n   */\n  async createAnswer() {\n    let sessionDescription: RTCSessionDescriptionInit;\n    sessionDescription = await this.peerConnection.createAnswer();\n    this.peerConnection.setLocalDescription(sessionDescription)\n\n    return sessionDescription;\n  }\n\n  /**\n   * Receives answer from remote peers.\n   */\n  async receiveAnswer(event: RTCSessionDescriptionInit | undefined) {\n    if (event) {\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(event))\n    }\n  }\n\n  /**\n   * \n   * @param candidate \n   */\n  async addCandidate(candidate: RTCIceCandidate) {\n    await this.peerConnection.addIceCandidate(candidate);\n  }\n\n  onTrack(callback: (event: RTCTrackEvent) => void) {\n    this.peerConnection.ontrack = callback ;\n  }\n\n  onIceCandidate(callback: (event: RTCPeerConnectionIceEvent) => void) {\n    this.peerConnection.onicecandidate = callback ;\n  }\n\n  async setRemoteDescription(description: RTCSessionDescriptionInit) {\n    await this.peerConnection.setRemoteDescription(description);\n  }\n\n  addIceCandidate(candidate: RTCIceCandidate) {\n    this.peerConnection.addIceCandidate(candidate);\n  }\n\n  disconnect() {\n    this.peerConnection.close();\n  }\n}","import React, { useEffect, useState, useRef } from 'react'\nimport { useLocation } from \"react-router-dom\";\nimport { verifySocket, connectSession } from '../../services/api.services';\nimport logo from '../../assets/images/logo.svg';\nimport micOn from '../../assets/images/mic-on.svg';\nimport micOff from '../../assets/images/mic-off.svg';\nimport camOn from '../../assets/images/cam-on.svg';\nimport camOff from '../../assets/images/cam-off.svg';\nimport view from '../../assets/images/view.svg';\nimport { SessionCredentials } from '../session-modal/modal';\nimport './meeting.scss';\nimport { ResponseData } from '../../interfaces/response-data';\nimport { ConnectionSocket } from '../../services/web-socket.services';\nimport { generateId } from '../../utils/identifier.utils';\nimport { SocketEvent, SocketResponse } from '../../interfaces/socket-data';\nimport { State } from '../state-machine/state-machine';\nimport { STUN_SERVERS } from '../../constants/stun-servers';\nimport { EasyRTC } from '../../utils/easy-rtc';\nimport { useBeforeunload } from 'react-beforeunload';\n\nexport const Meeting = () => {\n  const location = useLocation();\n  const [state, setState] = useState<State>(State.INVALID);\n  const [title, setTitle] = useState<string>('');\n  const [audio, setAudio] = useState<boolean>();\n  const [video, setVideo] = useState<boolean>();\n  const [viewMode, setViewMode] = useState<boolean>(false);\n  const [connection, setConnection] = useState<ConnectionSocket>();\n  const [users, setUsers] = useState<string[]>([]);\n  const [socket, setSocket] = useState<string>('');\n  const [url] = useState<string>(location.pathname.split('/meeting/')[1]);\n  const [localStream, setLocalStream] = useState<MediaStream>();\n  const localVideo = useRef<HTMLVideoElement>(null);\n  const userId = useRef<string>(generateId());\n\n  useBeforeunload((event: Event) => {\n    event.preventDefault();\n    if (connection) {\n      connection.send('disconnect', userId.current);\n    }\n  });\n\n  useEffect(() => {\n    let unmounted = false;\n    const getValidity = async () => {\n      try {\n        await verifySocket(url);\n        if (!unmounted) {\n          setState(State.VALID_URL);\n        }\n      } catch (error) {\n        console.log(error.message);\n        console.error('Invalid URL');\n        window.location.href = '/';\n      }\n    }\n    getValidity();\n    return () => {\n      unmounted = true;\n    };\n  }, [url])\n\n  const connect = (host: string, password: string) => {\n    connectSession(host, password, url).then((response: Response & ResponseData) => {\n      if (response.data.title) {\n        setTitle(response.data.title);\n      }\n\n      if (response.data.socket) {\n        setSocket(response.data.socket);\n      }\n\n      setState(State.LOGGED);\n    }).catch((error) => {\n      setState(State.INVALID);\n    });\n  }\n\n  const joinMeeting = () => {\n    switch (state) {\n      case State.LOGGED:\n        setState(State.JOINED);\n        break;\n      case State.JOINED:\n        setState(State.LOGGED);\n        break;\n    }\n  }\n\n  useEffect(() => {\n    if (state >= 3) {\n      if (localVideo.current && !localVideo.current.srcObject) {\n        navigator.mediaDevices.getUserMedia(\n          { audio: true, video: true }\n        ).then(stream => {\n          if (localVideo.current) {\n            localVideo.current.srcObject = stream;\n          }\n          setLocalStream(stream);\n\n          setAudio(true);\n          setVideo(true);\n        }).catch(error => {\n          console.log(error);\n        });\n      }\n    }\n  }, [state]);\n\n  useEffect(() => {\n    if (localStream) {\n      const media: MediaStream = localStream;\n      media.getTracks().forEach((track: MediaStreamTrack) => {\n        if (track.kind === 'audio') {\n          track.enabled = !track.enabled;\n        }\n      });\n    }\n  }, [localStream, audio]);\n\n  useEffect(() => {\n    if (localStream) {\n      const media: MediaStream = localStream;\n      media.getTracks().forEach((track: MediaStreamTrack) => {\n        if (track.kind === 'video') {\n          track.enabled = !track.enabled;\n        }\n      });\n    }\n  }, [localStream, video]);\n\n  useEffect(() => {\n    if (state === 3 && connection) {\n      connection.send('disconnect', userId.current);\n      setUsers([]);\n    }\n  }, [state, connection]);\n\n  useEffect(() => {\n    if (state > 3) {\n      const socketConnection = new ConnectionSocket(`${process.env.REACT_APP_WS_URL}/${socket}`);\n      const remoteStreams: MediaStream[] = [];\n      const rtcPeerConnection: EasyRTC[] = [];\n\n      const onConnectionReady = () => {\n        socketConnection.send('connect', userId.current);\n      }\n\n      const onMessage = (event: Event & SocketEvent) => {\n        const data: SocketResponse = JSON.parse(event.data);\n\n        if (!rtcPeerConnection[data.userID] && userId.current !== data.userID) {\n          if (!remoteStreams[data.userID]) {\n            remoteStreams[data.userID] = new MediaStream();\n          }\n\n          if (localVideo.current && localVideo.current.srcObject) {\n            rtcPeerConnection[data.userID] = new EasyRTC(STUN_SERVERS, localVideo.current.srcObject as MediaStream);\n          }\n\n          rtcPeerConnection[data.userID].onIceCandidate((event: RTCPeerConnectionIceEvent) => {\n            if (event.candidate) {\n              socketConnection.candidate(event.candidate, userId.current);\n            }\n          });\n\n          rtcPeerConnection[data.userID].onTrack((event: RTCTrackEvent) => {\n            const mediaStream: MediaStream = remoteStreams[data.userID];\n            mediaStream.addTrack(event.track);\n\n            const element = document.getElementById(`${data.userID}-video`) as HTMLMediaElement;\n            element.srcObject = mediaStream;\n          });\n        }\n\n        switch (data.type) {\n          case 'session_joined':\n            socketConnection.send('start_call', userId.current);\n            break;\n          case 'start_call':\n            if (data.userID !== userId.current) {\n              setUsers((prevState: string[]) => prevState.indexOf(data.userID) < 0 ? prevState.concat(data.userID) : prevState);\n              rtcPeerConnection[data.userID].createOffer().then((description: RTCSessionDescriptionInit) => {\n                socketConnection.sendDescription('offer', description, userId.current, data.userID);\n              });\n            }\n            break;\n          case 'offer':\n            if (data.to === userId.current) {\n              setUsers((prevState: string[]) => prevState.indexOf(data.userID) < 0 ? prevState.concat(data.userID) : prevState);\n              rtcPeerConnection[data.userID].setRemoteDescription(new RTCSessionDescription(JSON.parse(data.description))).then(async () => {\n                const answer = await rtcPeerConnection[data.userID].createAnswer();\n                socketConnection.sendDescription('answer', answer, userId.current, data.userID);\n              });\n            }\n            break;\n          case 'answer':\n            if (data.to === userId.current) {\n              rtcPeerConnection[data.userID].receiveAnswer(JSON.parse(data.description));\n            }\n            break;\n          case 'ice':\n            if (userId.current !== data.userID && data.candidate) {\n              rtcPeerConnection[data.userID].addIceCandidate(JSON.parse(data.candidate));\n            }\n            break\n          case 'disconnect':\n            if (data.userID !== userId.current) {\n              setUsers(prevItems => {\n                const users = [...prevItems];\n                users.splice(users.indexOf(data.userID), 1);\n                return users;\n              });\n              remoteStreams[data.userID] = undefined;\n              rtcPeerConnection[data.userID] = undefined;\n            }\n            break;\n        }\n      }\n\n      socketConnection.onOpen(onConnectionReady);\n      socketConnection.onMessage(onMessage);\n      setConnection(socketConnection);\n    }\n  }, [state, socket])\n\n  return (\n    <div className=\"meeting\">\n      <div className=\"meeting__header\">\n        <div className=\"meeting__header__left\">\n          <img src={logo} alt=\"Logo\" className=\"meeting__header__left__logo\" />\n          <span className=\"meeting__header__left__text\">MeetJS</span>\n        </div>\n        <div className=\"meeting__header__right\">\n          <span className=\"meeting__header__right__margin\">Github</span>\n          <span>About</span>\n        </div>\n      </div>\n      <div className=\"meeting__body\">\n        {state <= 2 && <SessionCredentials error={state === State.INVALID} connect={connect}></SessionCredentials>}\n        {state === State.LOGGED &&\n          (\n            <div className=\"meeting__body__info\">Join the meeting to communicate with others.</div>\n          )\n        }\n        {state === State.JOINED && (\n          <div className={`meeting__body__users ${viewMode ? 'meeting__body__users-row' : 'meeting__body__users-column'}`}>\n            {\n              users.map((user, index) => {\n                return (\n                  <video\n                    key={index}\n                    id={`${user}-video`}\n                    autoPlay\n                    className={`meeting__body__users__remote-video ${viewMode ? 'meeting__body__users__remote-video-split' : ''}`}></video>\n                )\n              })\n            }\n          </div>\n        )}\n        {state > 2 &&\n          (\n            <div className=\"meeting__body__bar\">\n              <div className=\"meeting__body__bar__video-container\">\n                <video hidden={!video} ref={localVideo} autoPlay muted className=\"meeting__body__bar__video-container__local-video\" id=\"local-video\">\n                </video>\n              </div>\n              <div className=\"meeting__body__bar__left-bar\">\n                <div onClick={joinMeeting} className={`meeting__body__bar__left-bar__status ${state === State.JOINED ? 'meeting__body__bar__left-bar__status-inactive' : 'meeting__body__bar__left-bar__status-active'}`}>\n                  {state === State.JOINED ? 'Leave' : 'Join'}\n                </div>\n                <span className=\"meeting__body__bar__left-bar__title\">{title}</span>\n              </div>\n              <div className=\"meeting__body__bar__right-bar\">\n                {\n                  state === State.JOINED &&\n                  <span className=\"meeting__body__bar__right-bar__count\">{users.length} online users</span>\n                }\n                <img className=\"meeting__body__bar__right-bar__icon\" src={view} alt=\"Change view\" onClick={() => setViewMode(!viewMode)} />\n                <img className=\"meeting__body__bar__right-bar__icon\" src={audio ? micOn : micOff} alt=\"Mic\" onClick={() => setAudio(!audio)} />\n                <img className=\"meeting__body__bar__right-bar__icon\" src={video ? camOn : camOff} alt=\"Webcam\" onClick={() => setVideo(!video)} />\n              </div>\n            </div>\n          )\n        }\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport './App.scss';\nimport { Router, Redirect, Route, Switch  } from \"react-router\";\nimport { Home } from './components/home/home';\nimport { Meeting } from './components/meeting/meeting';\nimport { createBrowserHistory } from \"history\";\n\nfunction App() {\n  const history = createBrowserHistory();\n\n  return (\n    <div className=\"app\">\n      <Router history={history}>\n        <Switch>\n          <Route exact path=\"/meeting/*\">\n            <Meeting></Meeting>\n          </Route>\n          <Route exact path=\"/\">\n            <Home></Home>\n          </Route>\n          <Route path=\"*\">\n            <Redirect push={true} to='/'></Redirect>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}